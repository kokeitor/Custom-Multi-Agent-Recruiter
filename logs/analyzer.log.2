[INFO|agents|L44] 2024-06-28 23:30:48: Estado previo [Analyzer-Agent] : 
 {'candidato': Candidato(id='37ce2e9e-2c70-4fd7-9cec-56a002b5d54d', cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti', oferta='Enfermera en Clínica Privada'), 'analisis': None, 'alucinacion_cv': None, 'alucinacion_oferta': None, 'analisis_final': None}
[INFO|agents|L47] 2024-06-28 23:30:48: Análisis del candidato : 
 candidato=Candidato(id='37ce2e9e-2c70-4fd7-9cec-56a002b5d54d', cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti', oferta='Enfermera en Clínica Privada')
[INFO|chains|L38] 2024-06-28 23:30:48: Initializing LangChain using : get_nvdia
[INFO|models|L47] 2024-06-28 23:30:48: Using NVIDIA : meta/llama3-70b-instruct
[INFO|agents|L85] 2024-06-28 23:30:58: Estado tras Analyzer-Agent : 
 {'candidato': Candidato(id='37ce2e9e-2c70-4fd7-9cec-56a002b5d54d', cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti', oferta='Enfermera en Clínica Privada'), 'analisis': [Analisis(id='37ce2e9e-2c70-4fd7-9cec-56a002b5d54d', fecha='2024-06-28 23:30:58', puntuacion=85, experiencias=[{'experiencia': 'Enfermera', 'puesto': 'Enfermera', 'empresa': 'Hospital General de Ciudad Jardín', 'duracion': 'Febrero 2023 / Presente'}, {'experiencia': 'Asistente de Enfermería', 'puesto': 'Asistente de Enfermería', 'empresa': 'Clínica Salud y Vida', 'duracion': 'Marzo 2020 / Enero 2023'}], descripcion='La candidata Laura Torres tiene una sólida experiencia laboral en el campo de la enfermería, con más de 3 años de experiencia en atención a pacientes y administración de medicamentos. Su experiencia como Enfermera en el Hospital General de Ciudad Jardín y como Asistente de Enfermería en la Clínica Salud y Vida demuestra su capacidad para trabajar en entornos médicos y colaborar con equipos médicos. Su formación académica en Enfermería y sus habilidades en atención al paciente y administración de medicamentos también son relevantes para el puesto de Enfermera en Clínica Privada. La única área de mejora es que no tiene experiencia directa en clínicas privadas, pero su experiencia en entornos médicos similares es muy valiosa.', status='OK')], 'alucinacion_cv': None, 'alucinacion_oferta': None, 'analisis_final': None}
[INFO|chains|L38] 2024-06-28 23:30:58: Initializing LangChain using : get_nvdia
[INFO|models|L47] 2024-06-28 23:30:58: Using NVIDIA : meta/llama3-70b-instruct
[INFO|agents|L101] 2024-06-28 23:30:58: Reviewer-Cv-Agent..
[INFO|streamlit|L31] 2024-06-28 23:31:18: Streamlit app mode
[INFO|streamlit|L34] 2024-06-28 23:31:18: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-28 23:31:18: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-28 23:31:18: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-28 23:31:18: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-28 23:31:18: Graph and workflow created
[INFO|chatbot|L19] 2024-06-28 23:31:18: Image path : IMAGES_PATH='data\\images'
[INFO|chatbot|L36] 2024-06-28 23:31:18: Candidato a analizar [Recibido del front end]:  Nombre: Laura Torres\nDirección: Paseo de la Libertad 45, Ciudad Jardín\nEmail: laura.torres@ejemplo.com\nTel: 555-789-0123\n\nEXPERIENCIA LABORAL\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\n\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\n\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\n\nFORMACIÓN ACADÉMICA\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\n\nIDIOMAS\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\n\nHABILIDADES\n- Atención al paciente\n- Administración de medicamentos\n- Gesti - Enfermera en Clínica Privada
[INFO|chatbot|L43] 2024-06-28 23:31:18: Candidato a analizar :  id='7148497b-0ff1-432b-b7d6-a1de9694917d' cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti' oferta='Enfermera en Clínica Privada'
[INFO|agents|L44] 2024-06-28 23:31:18: Estado previo [Analyzer-Agent] : 
 {'candidato': Candidato(id='7148497b-0ff1-432b-b7d6-a1de9694917d', cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti', oferta='Enfermera en Clínica Privada'), 'analisis': None, 'alucinacion_cv': None, 'alucinacion_oferta': None, 'analisis_final': None}
[INFO|agents|L47] 2024-06-28 23:31:18: Análisis del candidato : 
 candidato=Candidato(id='7148497b-0ff1-432b-b7d6-a1de9694917d', cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti', oferta='Enfermera en Clínica Privada')
[INFO|chains|L38] 2024-06-28 23:31:18: Initializing LangChain using : get_nvdia
[INFO|models|L47] 2024-06-28 23:31:18: Using NVIDIA : meta/llama3-70b-instruct
[INFO|agents|L85] 2024-06-28 23:31:27: Estado tras Analyzer-Agent : 
 {'candidato': Candidato(id='7148497b-0ff1-432b-b7d6-a1de9694917d', cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti', oferta='Enfermera en Clínica Privada'), 'analisis': [Analisis(id='7148497b-0ff1-432b-b7d6-a1de9694917d', fecha='2024-06-28 23:31:27', puntuacion=85, experiencias=[{'experiencia': 'Enfermera', 'puesto': 'Enfermera', 'empresa': 'Hospital General de Ciudad Jardín', 'duracion': 'Febrero 2023 / Presente'}, {'experiencia': 'Asistente de Enfermería', 'puesto': 'Asistente de Enfermería', 'empresa': 'Clínica Salud y Vida', 'duracion': 'Marzo 2020 / Enero 2023'}], descripcion='La candidata Laura Torres tiene una sólida experiencia laboral en el campo de la enfermería, con más de 3 años de experiencia en atención a pacientes y administración de medicamentos. Su experiencia actual como enfermera en el Hospital General de Ciudad Jardín y su anterior experiencia como asistente de enfermería en la Clínica Salud y Vida la hacen una candidata idónea para el puesto de Enfermera en Clínica Privada. Además, su formación académica en Enfermería y sus habilidades en atención al paciente y administración de medicamentos la hacen una candidata muy competitiva.', status='OK')], 'alucinacion_cv': None, 'alucinacion_oferta': None, 'analisis_final': None}
[INFO|chains|L38] 2024-06-28 23:31:27: Initializing LangChain using : get_nvdia
[INFO|models|L47] 2024-06-28 23:31:27: Using NVIDIA : meta/llama3-70b-instruct
[INFO|agents|L101] 2024-06-28 23:31:27: Reviewer-Cv-Agent..
[INFO|agents|L111] 2024-06-28 23:31:29: Hallucination-CV-Agent response : 
 {'puntuacion': 0}
[INFO|agents|L121] 2024-06-28 23:31:29: Estado tras Reviewer-Cv-Agent : 
 {'candidato': Candidato(id='7148497b-0ff1-432b-b7d6-a1de9694917d', cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti', oferta='Enfermera en Clínica Privada'), 'analisis': [Analisis(id='7148497b-0ff1-432b-b7d6-a1de9694917d', fecha='2024-06-28 23:31:27', puntuacion=85, experiencias=[{'experiencia': 'Enfermera', 'puesto': 'Enfermera', 'empresa': 'Hospital General de Ciudad Jardín', 'duracion': 'Febrero 2023 / Presente'}, {'experiencia': 'Asistente de Enfermería', 'puesto': 'Asistente de Enfermería', 'empresa': 'Clínica Salud y Vida', 'duracion': 'Marzo 2020 / Enero 2023'}], descripcion='La candidata Laura Torres tiene una sólida experiencia laboral en el campo de la enfermería, con más de 3 años de experiencia en atención a pacientes y administración de medicamentos. Su experiencia actual como enfermera en el Hospital General de Ciudad Jardín y su anterior experiencia como asistente de enfermería en la Clínica Salud y Vida la hacen una candidata idónea para el puesto de Enfermera en Clínica Privada. Además, su formación académica en Enfermería y sus habilidades en atención al paciente y administración de medicamentos la hacen una candidata muy competitiva.', status='OK')], 'alucinacion_cv': 0, 'alucinacion_oferta': None, 'analisis_final': None}
[INFO|agents|L134] 2024-06-28 23:31:29: Estado previo [Reviewer-Agent] : 
 {'candidato': Candidato(id='7148497b-0ff1-432b-b7d6-a1de9694917d', cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti', oferta='Enfermera en Clínica Privada'), 'analisis': [Analisis(id='7148497b-0ff1-432b-b7d6-a1de9694917d', fecha='2024-06-28 23:31:27', puntuacion=85, experiencias=[{'experiencia': 'Enfermera', 'puesto': 'Enfermera', 'empresa': 'Hospital General de Ciudad Jardín', 'duracion': 'Febrero 2023 / Presente'}, {'experiencia': 'Asistente de Enfermería', 'puesto': 'Asistente de Enfermería', 'empresa': 'Clínica Salud y Vida', 'duracion': 'Marzo 2020 / Enero 2023'}], descripcion='La candidata Laura Torres tiene una sólida experiencia laboral en el campo de la enfermería, con más de 3 años de experiencia en atención a pacientes y administración de medicamentos. Su experiencia actual como enfermera en el Hospital General de Ciudad Jardín y su anterior experiencia como asistente de enfermería en la Clínica Salud y Vida la hacen una candidata idónea para el puesto de Enfermera en Clínica Privada. Además, su formación académica en Enfermería y sus habilidades en atención al paciente y administración de medicamentos la hacen una candidata muy competitiva.', status='OK')], 'alucinacion_cv': 0, 'alucinacion_oferta': None, 'analisis_final': None}
[INFO|chains|L38] 2024-06-28 23:31:29: Initializing LangChain using : get_nvdia
[INFO|models|L47] 2024-06-28 23:31:29: Using NVIDIA : meta/llama3-70b-instruct
[INFO|agents|L140] 2024-06-28 23:31:29: Reviewer-Offer-Agent..
[INFO|agents|L150] 2024-06-28 23:31:31: Hallucination-Offer-Agent response  : 
 {'alucinacion': 0}
[INFO|agents|L159] 2024-06-28 23:31:31: Estado tras Reviewer-Agent : 
 {'candidato': Candidato(id='7148497b-0ff1-432b-b7d6-a1de9694917d', cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti', oferta='Enfermera en Clínica Privada'), 'analisis': [Analisis(id='7148497b-0ff1-432b-b7d6-a1de9694917d', fecha='2024-06-28 23:31:27', puntuacion=85, experiencias=[{'experiencia': 'Enfermera', 'puesto': 'Enfermera', 'empresa': 'Hospital General de Ciudad Jardín', 'duracion': 'Febrero 2023 / Presente'}, {'experiencia': 'Asistente de Enfermería', 'puesto': 'Asistente de Enfermería', 'empresa': 'Clínica Salud y Vida', 'duracion': 'Marzo 2020 / Enero 2023'}], descripcion='La candidata Laura Torres tiene una sólida experiencia laboral en el campo de la enfermería, con más de 3 años de experiencia en atención a pacientes y administración de medicamentos. Su experiencia actual como enfermera en el Hospital General de Ciudad Jardín y su anterior experiencia como asistente de enfermería en la Clínica Salud y Vida la hacen una candidata idónea para el puesto de Enfermera en Clínica Privada. Además, su formación académica en Enfermería y sus habilidades en atención al paciente y administración de medicamentos la hacen una candidata muy competitiva.', status='OK')], 'alucinacion_cv': 0, 'alucinacion_oferta': 0, 'analisis_final': None}
[INFO|agents|L169] 2024-06-28 23:31:31: Analisis final : 
 id='7148497b-0ff1-432b-b7d6-a1de9694917d' fecha='2024-06-28 23:31:27' puntuacion=85 experiencias=[{'experiencia': 'Enfermera', 'puesto': 'Enfermera', 'empresa': 'Hospital General de Ciudad Jardín', 'duracion': 'Febrero 2023 / Presente'}, {'experiencia': 'Asistente de Enfermería', 'puesto': 'Asistente de Enfermería', 'empresa': 'Clínica Salud y Vida', 'duracion': 'Marzo 2020 / Enero 2023'}] descripcion='La candidata Laura Torres tiene una sólida experiencia laboral en el campo de la enfermería, con más de 3 años de experiencia en atención a pacientes y administración de medicamentos. Su experiencia actual como enfermera en el Hospital General de Ciudad Jardín y su anterior experiencia como asistente de enfermería en la Clínica Salud y Vida la hacen una candidata idónea para el puesto de Enfermera en Clínica Privada. Además, su formación académica en Enfermería y sus habilidades en atención al paciente y administración de medicamentos la hacen una candidata muy competitiva.' status='OK'
[INFO|agents|L177] 2024-06-28 23:31:31: Nodo final
[INFO|streamlit|L31] 2024-06-28 23:34:17: Streamlit app mode
[INFO|streamlit|L34] 2024-06-28 23:34:17: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-28 23:34:17: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-28 23:34:17: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-28 23:34:17: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-28 23:34:17: Graph and workflow created
[INFO|chatbot|L19] 2024-06-28 23:34:17: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-28 23:34:34: Streamlit app mode
[INFO|streamlit|L34] 2024-06-28 23:34:34: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-28 23:34:34: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-28 23:34:34: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7AB600>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-28 23:34:34: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-28 23:34:34: Graph and workflow created
[INFO|chatbot|L19] 2024-06-28 23:34:34: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-28 23:51:57: Streamlit app mode
[INFO|streamlit|L34] 2024-06-28 23:51:57: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-28 23:51:57: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-28 23:51:57: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB4040>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB4040>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB4040>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB4040>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-28 23:51:57: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-28 23:51:57: Graph and workflow created
[INFO|chatbot|L19] 2024-06-28 23:51:57: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-28 23:54:27: Streamlit app mode
[INFO|streamlit|L34] 2024-06-28 23:54:27: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-28 23:54:27: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-28 23:54:27: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C28548DC60>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C28548DC60>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C28548DC60>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C28548DC60>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-28 23:54:27: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-28 23:54:27: Graph and workflow created
[INFO|chatbot|L19] 2024-06-28 23:54:27: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-28 23:54:57: Streamlit app mode
[INFO|streamlit|L34] 2024-06-28 23:54:57: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-28 23:54:57: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-28 23:54:57: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB40E0>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB40E0>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB40E0>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB40E0>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-28 23:54:57: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-28 23:54:57: Graph and workflow created
[INFO|chatbot|L19] 2024-06-28 23:54:57: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-28 23:57:55: Streamlit app mode
[INFO|streamlit|L34] 2024-06-28 23:57:55: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-28 23:57:55: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-28 23:57:55: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7ABF60>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7ABF60>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7ABF60>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7ABF60>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-28 23:57:55: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-28 23:57:55: Graph and workflow created
[INFO|chatbot|L19] 2024-06-28 23:57:55: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-28 23:58:16: Streamlit app mode
[INFO|streamlit|L34] 2024-06-28 23:58:16: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-28 23:58:16: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-28 23:58:16: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB40E0>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB40E0>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB40E0>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB40E0>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-28 23:58:16: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-28 23:58:16: Graph and workflow created
[INFO|chatbot|L19] 2024-06-28 23:58:16: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 00:13:05: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 00:13:05: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 00:13:05: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 00:13:05: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7ABBA0>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7ABBA0>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7ABBA0>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C29F7ABBA0>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 00:13:05: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 00:13:05: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 00:13:05: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 00:13:33: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 00:13:33: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 00:13:33: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 00:13:33: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB4540>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB4540>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB4540>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C2A0FB4540>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 00:13:33: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 00:13:33: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 00:13:33: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 00:16:42: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 00:16:42: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 00:16:42: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 00:16:42: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C285520220>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C285520220>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C285520220>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001C285520220>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 00:16:42: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 00:16:42: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 00:16:42: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 00:17:10: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 00:17:10: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 00:17:10: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
