[INFO|modes|L284] 2024-06-29 10:25:40: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:25:40: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:25:40: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:25:40: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:25:41: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:25:41: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:25:41: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:25:41: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:25:41: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:25:41: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:25:41: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:25:55: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:25:55: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:25:55: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:25:55: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:25:55: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:25:55: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:25:55: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:25:57: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:25:57: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:25:57: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:25:57: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:25:57: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:25:57: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:25:57: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:25:58: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:25:58: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:25:58: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:25:58: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:25:58: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:25:58: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:25:58: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:25:59: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:25:59: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:25:59: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:25:59: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE285EE660>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:25:59: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:25:59: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:25:59: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:26:17: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:26:17: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:26:17: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:26:17: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF8D60>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF8D60>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF8D60>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF8D60>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:26:17: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:26:17: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:26:17: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:26:35: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:26:35: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:26:35: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:26:35: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:26:35: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:26:35: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:26:35: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:26:38: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:26:38: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:26:38: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:26:38: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:26:38: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:26:38: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:26:38: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:26:40: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:26:40: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:26:40: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:26:40: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9D00>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:26:40: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:26:40: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:26:40: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:29:23: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:29:23: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:29:23: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:29:23: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CFAC00>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CFAC00>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CFAC00>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CFAC00>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:29:23: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:29:23: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:29:23: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:29:57: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:29:57: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:29:57: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:29:57: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9760>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9760>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9760>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF9760>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:29:57: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:29:57: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:29:57: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:31:41: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:31:41: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:31:41: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:31:41: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF85E0>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF85E0>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF85E0>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF85E0>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:31:41: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:31:41: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:31:41: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:31:46: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:31:46: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:31:46: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L284] 2024-06-29 10:31:46: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF85E0>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> experiencia : \'no hay información suficiente\'\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF85E0>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            \n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            \n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF85E0>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template="<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato aparecen tambien en su cv.\n\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experienica : 'no hay información suficiente'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: puntuacion : <número entero : 0 o 1> \n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                cv del candidato: {cv}\n                Experiencias de trabajo del candidato: {experiencias}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ")), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001DE43CF85E0>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON según el esquema: alucionacion: <número entero: 0 o 1> \n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|streamlit|L38] 2024-06-29 10:31:46: Creating graph and compiling workflow...
[INFO|streamlit|L41] 2024-06-29 10:31:46: Graph and workflow created
[INFO|chatbot|L19] 2024-06-29 10:31:46: Image path : IMAGES_PATH='data\\images'
[INFO|streamlit|L31] 2024-06-29 10:31:47: Streamlit app mode
[INFO|streamlit|L34] 2024-06-29 10:31:47: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|modes|L229] 2024-06-29 10:31:47: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
