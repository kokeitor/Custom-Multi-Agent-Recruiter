[INFO|modes|L304] 2024-06-30 16:45:36: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x0000029B57A2D440>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x0000029B57A2D440>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='OPENAI', get_model=<function get_open_ai_json at 0x0000029B57A2CF40>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template='\n                Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato se aparecen tambien en su cv.\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experiencia : \'no tiene\'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si no hay experiencias de trabajo.\n\n                El formato de salida debe ser en formato JSON con una unica clave "puntuacion"\n\n                Basate en la siguiente información proporcionada para dar esta puntuación de alucinación: \n\n                cv del candidato: \n\n{cv}\n\n\n                Experiencias de trabajo del candidato: \n\n{experiencias}\n\n\n                ')), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x0000029B57A2D440>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON con una unica clave "alucinacion"\n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|modes|L249] 2024-06-30 16:45:36: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L304] 2024-06-30 16:45:36: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x0000029B57A2D440>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x0000029B57A2D440>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='OPENAI', get_model=<function get_open_ai_json at 0x0000029B57A2CF40>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template='\n                Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato se aparecen tambien en su cv.\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experiencia : \'no tiene\'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si no hay experiencias de trabajo.\n\n                El formato de salida debe ser en formato JSON con una unica clave "puntuacion"\n\n                Basate en la siguiente información proporcionada para dar esta puntuación de alucinación: \n\n                cv del candidato: \n\n{cv}\n\n\n                Experiencias de trabajo del candidato: \n\n{experiencias}\n\n\n                ')), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x0000029B57A2D440>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON con una unica clave "alucinacion"\n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|modes|L249] 2024-06-30 16:45:37: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L304] 2024-06-30 16:45:37: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x0000029B57A2D440>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x0000029B57A2D440>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='OPENAI', get_model=<function get_open_ai_json at 0x0000029B57A2CF40>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template='\n                Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato se aparecen tambien en su cv.\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experiencia : \'no tiene\'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si no hay experiencias de trabajo.\n\n                El formato de salida debe ser en formato JSON con una unica clave "puntuacion"\n\n                Basate en la siguiente información proporcionada para dar esta puntuación de alucinación: \n\n                cv del candidato: \n\n{cv}\n\n\n                Experiencias de trabajo del candidato: \n\n{experiencias}\n\n\n                ')), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x0000029B57A2D440>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON con una unica clave "alucinacion"\n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[WARNING|chatbot|L222] 2024-06-30 16:45:37: Previous Analyzer Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x0000029B57A2D440>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))
[WARNING|chatbot|L224] 2024-06-30 16:45:37: After change Analyzer Agent(agent_name='analyzer', model='GEMINI', get_model=<function get_gemini_pro at 0x0000029B57A2D580>, temperature=0.0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tu tarea es proporcionar una salida en formato JSON que contenga:\n\n                1. La puntuación.\n\n                2. Un listado con las experiencias del candidato solo si están relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n\n                3. Una descripción de por qué el candidato obtuvo la puntuación dada.\n\n\n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n\n                Debes ser preciso con la puntuación dada al candidato en función de su experiencia profesional y la relación real con la oferta de trabajo.\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ] \n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                Si el CV del candidato no está relacionado con la oferta de empleo y tampoco tiene experiencia previa relacionada con la oferta de trabajo:\n\n                a. La puntuación debe ser baja.\n\n                b. La descripción de por qué se le ha dado esa puntuación debe ser desfavorable.\n\n                \n                Este es el CV del candidato a analizar y la oferta de trabajo:\n\n                Título de la oferta de trabajo: \n\n{oferta}\n\n\n                CV del candidato: \n\n{cv}\n\n\n                '))
[INFO|chatbot|L227] 2024-06-30 16:45:37: Creating graph and compiling workflow...
[INFO|chatbot|L231] 2024-06-30 16:45:37: Graph and workflow created
[INFO|chatbot|L76] 2024-06-30 16:45:37: Candidato a analizar [Recibido del front end]:  Nombre: Laura Torres\nDirección: Paseo de la Libertad 45, Ciudad Jardín\nEmail: laura.torres@ejemplo.com\nTel: 555-789-0123\n\nEXPERIENCIA LABORAL\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\n\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\n\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\n\nFORMACIÓN ACADÉMICA\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\n\nIDIOMAS\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\n\nHABILIDADES\n- Atención al paciente\n- Administración de medicamentos\n- Gesti - Posición: Desarrollador Web Full Stack  Ubicación: Ciudad de México, México  Descripción del Puesto:  Innovatech S.A. busca un Desarrollador Web Full Stack para unirse a nuestro equipo dinámico. El candidato ideal será responsable del desarrollo y mantenimiento de aplicaciones web utilizando tecnologías modernas como React.js, Vue.js, y Django. Colaborará estrechamente con nuestros equipos de diseño y desarrollo para crear soluciones innovadoras que impulsen nuestra plataforma tecnológica hacia adelante.
[INFO|chatbot|L83] 2024-06-30 16:45:37: Candidato a analizar :  id='dd844d77-d29b-4fd6-a5ba-9d0d34605f71' cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti' oferta='Posición: Desarrollador Web Full Stack  Ubicación: Ciudad de México, México  Descripción del Puesto:  Innovatech S.A. busca un Desarrollador Web Full Stack para unirse a nuestro equipo dinámico. El candidato ideal será responsable del desarrollo y mantenimiento de aplicaciones web utilizando tecnologías modernas como React.js, Vue.js, y Django. Colaborará estrechamente con nuestros equipos de diseño y desarrollo para crear soluciones innovadoras que impulsen nuestra plataforma tecnológica hacia adelante.'
[INFO|agents|L20] 2024-06-30 16:45:37: Estado previo [Analyzer-Agent] : 
 {'candidato': Candidato(id='dd844d77-d29b-4fd6-a5ba-9d0d34605f71', cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti', oferta='Posición: Desarrollador Web Full Stack  Ubicación: Ciudad de México, México  Descripción del Puesto:  Innovatech S.A. busca un Desarrollador Web Full Stack para unirse a nuestro equipo dinámico. El candidato ideal será responsable del desarrollo y mantenimiento de aplicaciones web utilizando tecnologías modernas como React.js, Vue.js, y Django. Colaborará estrechamente con nuestros equipos de diseño y desarrollo para crear soluciones innovadoras que impulsen nuestra plataforma tecnológica hacia adelante.'), 'analisis': None, 'alucinacion_cv': None, 'alucinacion_oferta': None, 'analisis_final': None}
[INFO|agents|L23] 2024-06-30 16:45:37: Análisis del candidato : 
 candidato=Candidato(id='dd844d77-d29b-4fd6-a5ba-9d0d34605f71', cv='Nombre: Laura Torres\\nDirección: Paseo de la Libertad 45, Ciudad Jardín\\nEmail: laura.torres@ejemplo.com\\nTel: 555-789-0123\\n\\nEXPERIENCIA LABORAL\\n- Febrero 2023 / Presente: Enfermera - Hospital General de Ciudad Jardín\\n  Atención a pacientes, administración de medicamentos, colaboración con el equipo médico.\\n\\n- Marzo 2020 / Enero 2023: Asistente de Enfermería - Clínica Salud y Vida\\n  Apoyo en procedimientos médicos, cuidado de pacientes, gestión de suministros médicos.\\n\\n- Agosto 2017 / Febrero 2020: Auxiliar de Laboratorio - Laboratorios BioCare\\n  Toma de muestras, realización de análisis básicos, mantenimiento de equipos de laboratorio.\\n\\nFORMACIÓN ACADÉMICA\\n- Finalizada en Diciembre 2019: Grado en Enfermería, Universidad de Ciudad Jardín\\n\\nIDIOMAS\\n- Inglés: Intermedio (B2) en lectura, Intermedio (B2) en oral, Intermedio (B2) en escrita\\n- Español: Nativo (C2) en lectura, Nativo (C2) en oral, Nativo (C2) en escrita\\n\\nHABILIDADES\\n- Atención al paciente\\n- Administración de medicamentos\\n- Gesti', oferta='Posición: Desarrollador Web Full Stack  Ubicación: Ciudad de México, México  Descripción del Puesto:  Innovatech S.A. busca un Desarrollador Web Full Stack para unirse a nuestro equipo dinámico. El candidato ideal será responsable del desarrollo y mantenimiento de aplicaciones web utilizando tecnologías modernas como React.js, Vue.js, y Django. Colaborará estrechamente con nuestros equipos de diseño y desarrollo para crear soluciones innovadoras que impulsen nuestra plataforma tecnológica hacia adelante.')
[INFO|chains|L38] 2024-06-30 16:45:37: Initializing LangChain using : get_gemini_pro
[WARNING|before_sleep|L65] 2024-06-30 16:45:38: Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 2.0 seconds as it raised PermissionDenied: 403 Generative Language API has not been used in project 36972578384 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry. [links {
  description: "Google developers console API activation"
  url: "https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384"
}
, reason: "SERVICE_DISABLED"
domain: "googleapis.com"
metadata {
  key: "service"
  value: "generativelanguage.googleapis.com"
}
metadata {
  key: "consumer"
  value: "projects/36972578384"
}
].
[WARNING|before_sleep|L65] 2024-06-30 16:45:40: Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 4.0 seconds as it raised PermissionDenied: 403 Generative Language API has not been used in project 36972578384 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry. [links {
  description: "Google developers console API activation"
  url: "https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384"
}
, reason: "SERVICE_DISABLED"
domain: "googleapis.com"
metadata {
  key: "service"
  value: "generativelanguage.googleapis.com"
}
metadata {
  key: "consumer"
  value: "projects/36972578384"
}
].
[WARNING|before_sleep|L65] 2024-06-30 16:45:44: Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 8.0 seconds as it raised PermissionDenied: 403 Generative Language API has not been used in project 36972578384 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry. [links {
  description: "Google developers console API activation"
  url: "https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384"
}
, reason: "SERVICE_DISABLED"
domain: "googleapis.com"
metadata {
  key: "service"
  value: "generativelanguage.googleapis.com"
}
metadata {
  key: "consumer"
  value: "projects/36972578384"
}
].
[WARNING|before_sleep|L65] 2024-06-30 16:45:52: Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 16.0 seconds as it raised PermissionDenied: 403 Generative Language API has not been used in project 36972578384 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry. [links {
  description: "Google developers console API activation"
  url: "https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384"
}
, reason: "SERVICE_DISABLED"
domain: "googleapis.com"
metadata {
  key: "service"
  value: "generativelanguage.googleapis.com"
}
metadata {
  key: "consumer"
  value: "projects/36972578384"
}
].
[WARNING|before_sleep|L65] 2024-06-30 16:46:08: Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 32.0 seconds as it raised PermissionDenied: 403 Generative Language API has not been used in project 36972578384 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry. [links {
  description: "Google developers console API activation"
  url: "https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384"
}
, reason: "SERVICE_DISABLED"
domain: "googleapis.com"
metadata {
  key: "service"
  value: "generativelanguage.googleapis.com"
}
metadata {
  key: "consumer"
  value: "projects/36972578384"
}
].
[WARNING|before_sleep|L65] 2024-06-30 16:46:41: Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 60.0 seconds as it raised PermissionDenied: 403 Generative Language API has not been used in project 36972578384 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry. [links {
  description: "Google developers console API activation"
  url: "https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384"
}
, reason: "SERVICE_DISABLED"
domain: "googleapis.com"
metadata {
  key: "service"
  value: "generativelanguage.googleapis.com"
}
metadata {
  key: "consumer"
  value: "projects/36972578384"
}
].
[WARNING|before_sleep|L65] 2024-06-30 16:47:41: Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 60.0 seconds as it raised PermissionDenied: 403 Generative Language API has not been used in project 36972578384 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry. [links {
  description: "Google developers console API activation"
  url: "https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384"
}
, reason: "SERVICE_DISABLED"
domain: "googleapis.com"
metadata {
  key: "service"
  value: "generativelanguage.googleapis.com"
}
metadata {
  key: "consumer"
  value: "projects/36972578384"
}
].
[WARNING|before_sleep|L65] 2024-06-30 16:48:41: Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 60.0 seconds as it raised PermissionDenied: 403 Generative Language API has not been used in project 36972578384 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry. [links {
  description: "Google developers console API activation"
  url: "https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384"
}
, reason: "SERVICE_DISABLED"
domain: "googleapis.com"
metadata {
  key: "service"
  value: "generativelanguage.googleapis.com"
}
metadata {
  key: "consumer"
  value: "projects/36972578384"
}
].
[WARNING|before_sleep|L65] 2024-06-30 16:49:41: Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 60.0 seconds as it raised PermissionDenied: 403 Generative Language API has not been used in project 36972578384 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry. [links {
  description: "Google developers console API activation"
  url: "https://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=36972578384"
}
, reason: "SERVICE_DISABLED"
domain: "googleapis.com"
metadata {
  key: "service"
  value: "generativelanguage.googleapis.com"
}
metadata {
  key: "consumer"
  value: "projects/36972578384"
}
].
[INFO|streamlit|L33] 2024-06-30 16:51:15: Streamlit app mode
[INFO|streamlit|L36] 2024-06-30 16:51:15: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|chatbot|L43] 2024-06-30 16:51:15: Image path : IMAGES_PATH='data\\images'
[INFO|chatbot|L44] 2024-06-30 16:51:15: Secrets BBDD path : GOOGLE_SECRETS_FILE_NAME='etc\\secrets\\recruiter-427908-67769637005a.json'
[INFO|modes|L249] 2024-06-30 16:51:17: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L304] 2024-06-30 16:51:17: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='OPENAI', get_model=<function get_open_ai_json at 0x000001F9D3D92A20>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template='\n                Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato se aparecen tambien en su cv.\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experiencia : \'no tiene\'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si no hay experiencias de trabajo.\n\n                El formato de salida debe ser en formato JSON con una unica clave "puntuacion"\n\n                Basate en la siguiente información proporcionada para dar esta puntuación de alucinación: \n\n                cv del candidato: \n\n{cv}\n\n\n                Experiencias de trabajo del candidato: \n\n{experiencias}\n\n\n                ')), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON con una unica clave "alucinacion"\n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[WARNING|chatbot|L189] 2024-06-30 16:51:18: Previous Analyzer Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))
[WARNING|chatbot|L191] 2024-06-30 16:51:18: After change Analyzer Agent(agent_name='analyzer', model='OPENAI', get_model=<function get_open_ai_json at 0x000001F9D3D92A20>, temperature=0.0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tu tarea es proporcionar una salida en formato JSON que contenga:\n\n                1. La puntuación.\n\n                2. Un listado con las experiencias del candidato solo si están relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n\n                3. Una descripción de por qué el candidato obtuvo la puntuación dada.\n\n\n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n\n                Debes ser preciso con la puntuación dada al candidato en función de su experiencia profesional y la relación real con la oferta de trabajo.\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ] \n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                Si el CV del candidato no está relacionado con la oferta de empleo y tampoco tiene experiencia previa relacionada con la oferta de trabajo:\n\n                a. La puntuación debe ser baja.\n\n                b. La descripción de por qué se le ha dado esa puntuación debe ser desfavorable.\n\n                \n                Este es el CV del candidato a analizar y la oferta de trabajo:\n\n                Título de la oferta de trabajo: \n\n{oferta}\n\n\n                CV del candidato: \n\n{cv}\n\n\n                '))
[INFO|chatbot|L194] 2024-06-30 16:51:18: Creating graph and compiling workflow...
[INFO|chatbot|L198] 2024-06-30 16:51:18: Graph and workflow created
[INFO|utils|L22] 2024-06-30 16:51:20: CONFIG_LOGGER_FILE -> C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\model\..\..\config\logger.json
[INFO|streamlit|L33] 2024-06-30 16:51:20: Streamlit app mode
[INFO|streamlit|L36] 2024-06-30 16:51:20: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|chatbot|L43] 2024-06-30 16:51:20: Image path : IMAGES_PATH='data\\images'
[INFO|chatbot|L44] 2024-06-30 16:51:20: Secrets BBDD path : GOOGLE_SECRETS_FILE_NAME='etc\\secrets\\recruiter-427908-67769637005a.json'
[INFO|modes|L249] 2024-06-30 16:51:22: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L304] 2024-06-30 16:51:22: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='OPENAI', get_model=<function get_open_ai_json at 0x000001F9D3D92A20>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template='\n                Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato se aparecen tambien en su cv.\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experiencia : \'no tiene\'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si no hay experiencias de trabajo.\n\n                El formato de salida debe ser en formato JSON con una unica clave "puntuacion"\n\n                Basate en la siguiente información proporcionada para dar esta puntuación de alucinación: \n\n                cv del candidato: \n\n{cv}\n\n\n                Experiencias de trabajo del candidato: \n\n{experiencias}\n\n\n                ')), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON con una unica clave "alucinacion"\n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[WARNING|chatbot|L222] 2024-06-30 16:51:22: Previous Analyzer Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))
[WARNING|chatbot|L224] 2024-06-30 16:51:22: After change Analyzer Agent(agent_name='analyzer', model='GEMINI', get_model=<function get_gemini_pro at 0x000001F9D3E91F80>, temperature=0.0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tu tarea es proporcionar una salida en formato JSON que contenga:\n\n                1. La puntuación.\n\n                2. Un listado con las experiencias del candidato solo si están relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n\n                3. Una descripción de por qué el candidato obtuvo la puntuación dada.\n\n\n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n\n                Debes ser preciso con la puntuación dada al candidato en función de su experiencia profesional y la relación real con la oferta de trabajo.\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ] \n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                Si el CV del candidato no está relacionado con la oferta de empleo y tampoco tiene experiencia previa relacionada con la oferta de trabajo:\n\n                a. La puntuación debe ser baja.\n\n                b. La descripción de por qué se le ha dado esa puntuación debe ser desfavorable.\n\n                \n                Este es el CV del candidato a analizar y la oferta de trabajo:\n\n                Título de la oferta de trabajo: \n\n{oferta}\n\n\n                CV del candidato: \n\n{cv}\n\n\n                '))
[INFO|chatbot|L227] 2024-06-30 16:51:22: Creating graph and compiling workflow...
[INFO|chatbot|L231] 2024-06-30 16:51:22: Graph and workflow created
[INFO|utils|L22] 2024-06-30 16:51:23: CONFIG_LOGGER_FILE -> C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\model\..\..\config\logger.json
[INFO|streamlit|L33] 2024-06-30 16:51:23: Streamlit app mode
[INFO|streamlit|L36] 2024-06-30 16:51:23: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|chatbot|L43] 2024-06-30 16:51:23: Image path : IMAGES_PATH='data\\images'
[INFO|chatbot|L44] 2024-06-30 16:51:23: Secrets BBDD path : GOOGLE_SECRETS_FILE_NAME='etc\\secrets\\recruiter-427908-67769637005a.json'
[INFO|utils|L22] 2024-06-30 16:51:24: CONFIG_LOGGER_FILE -> C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\model\..\..\config\logger.json
[INFO|streamlit|L33] 2024-06-30 16:51:24: Streamlit app mode
[INFO|streamlit|L36] 2024-06-30 16:51:24: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|chatbot|L43] 2024-06-30 16:51:24: Image path : IMAGES_PATH='data\\images'
[INFO|chatbot|L44] 2024-06-30 16:51:24: Secrets BBDD path : GOOGLE_SECRETS_FILE_NAME='etc\\secrets\\recruiter-427908-67769637005a.json'
[INFO|utils|L22] 2024-06-30 16:51:25: CONFIG_LOGGER_FILE -> C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\model\..\..\config\logger.json
[INFO|streamlit|L33] 2024-06-30 16:51:25: Streamlit app mode
[INFO|streamlit|L36] 2024-06-30 16:51:25: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|chatbot|L43] 2024-06-30 16:51:25: Image path : IMAGES_PATH='data\\images'
[INFO|chatbot|L44] 2024-06-30 16:51:25: Secrets BBDD path : GOOGLE_SECRETS_FILE_NAME='etc\\secrets\\recruiter-427908-67769637005a.json'
[INFO|modes|L249] 2024-06-30 16:51:25: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L304] 2024-06-30 16:51:25: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='OPENAI', get_model=<function get_open_ai_json at 0x000001F9D3D92A20>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template='\n                Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato se aparecen tambien en su cv.\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experiencia : \'no tiene\'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si no hay experiencias de trabajo.\n\n                El formato de salida debe ser en formato JSON con una unica clave "puntuacion"\n\n                Basate en la siguiente información proporcionada para dar esta puntuación de alucinación: \n\n                cv del candidato: \n\n{cv}\n\n\n                Experiencias de trabajo del candidato: \n\n{experiencias}\n\n\n                ')), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON con una unica clave "alucinacion"\n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|utils|L22] 2024-06-30 16:51:25: CONFIG_LOGGER_FILE -> C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\model\..\..\config\logger.json
[INFO|streamlit|L33] 2024-06-30 16:51:25: Streamlit app mode
[INFO|streamlit|L36] 2024-06-30 16:51:25: CONFIG_PATH='C:\\Users\\Jorge\\Desktop\\MULTI_AGENT_RECRUITER\\src\\..\\config\\generation.json'
[INFO|chatbot|L43] 2024-06-30 16:51:25: Image path : IMAGES_PATH='data\\images'
[INFO|chatbot|L44] 2024-06-30 16:51:25: Secrets BBDD path : GOOGLE_SECRETS_FILE_NAME='etc\\secrets\\recruiter-427908-67769637005a.json'
[INFO|modes|L249] 2024-06-30 16:51:26: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L304] 2024-06-30 16:51:26: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='OPENAI', get_model=<function get_open_ai_json at 0x000001F9D3D92A20>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template='\n                Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato se aparecen tambien en su cv.\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experiencia : \'no tiene\'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si no hay experiencias de trabajo.\n\n                El formato de salida debe ser en formato JSON con una unica clave "puntuacion"\n\n                Basate en la siguiente información proporcionada para dar esta puntuación de alucinación: \n\n                cv del candidato: \n\n{cv}\n\n\n                Experiencias de trabajo del candidato: \n\n{experiencias}\n\n\n                ')), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON con una unica clave "alucinacion"\n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[WARNING|chatbot|L222] 2024-06-30 16:51:26: Previous Analyzer Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))
[WARNING|chatbot|L224] 2024-06-30 16:51:26: After change Analyzer Agent(agent_name='analyzer', model='GEMINI', get_model=<function get_gemini_pro at 0x000001F9D3E91F80>, temperature=0.0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tu tarea es proporcionar una salida en formato JSON que contenga:\n\n                1. La puntuación.\n\n                2. Un listado con las experiencias del candidato solo si están relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n\n                3. Una descripción de por qué el candidato obtuvo la puntuación dada.\n\n\n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n\n                Debes ser preciso con la puntuación dada al candidato en función de su experiencia profesional y la relación real con la oferta de trabajo.\n\n                No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ] \n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                Si el CV del candidato no está relacionado con la oferta de empleo y tampoco tiene experiencia previa relacionada con la oferta de trabajo:\n\n                a. La puntuación debe ser baja.\n\n                b. La descripción de por qué se le ha dado esa puntuación debe ser desfavorable.\n\n                \n                Este es el CV del candidato a analizar y la oferta de trabajo:\n\n                Título de la oferta de trabajo: \n\n{oferta}\n\n\n                CV del candidato: \n\n{cv}\n\n\n                '))
[INFO|chatbot|L227] 2024-06-30 16:51:26: Creating graph and compiling workflow...
[INFO|modes|L249] 2024-06-30 16:51:26: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
[INFO|modes|L304] 2024-06-30 16:51:26: Graph Agents : {'analyzer': Agent(agent_name='analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para evaluar la idoneidad de un candidato para un puesto de trabajo específico asignando una puntuación. Recibirás el título de una oferta de trabajo y un CV completo de un candidato. \n                Tus tareas son:\n\n                1. Asignar una puntuación al candidato.\n\n                2. Localizar en el CV todas las experiencias laborales, junto con el puesto, la empresa y la duracion.\n\n                3. Crear una descripción de por qué el candidato obtuvo la puntuación dada.\n\n                \n                Como salida, debes proporcionar un JSON con la siguiente estructura: [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n                No debes inventarte nada, si no encuentras experiencias de trabajo asociadas a la oferta en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n                No debes incluir en las experiencias de trabajo experiencias del candidato que no estén relacionadas con la oferta de empleo.\n\n                \n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 're_analyzer': Agent(agent_name='re_analyzer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['analisis_previo', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para corregir un análisis erróneo de un candidato para un puesto de trabajo específico. \n            Tu función es volver a analizar el CV del candidato y corregir el análisis erróneo previo.\n\n            Debes proporcionar una salida en formato JSON que contenga:\n\n            1. La nueva puntuación corregida.\n            2. Un listado corregido con las experiencias del candidato solo si están realmente relacionadas con la oferta propuesta, junto con la información de esa experiencia si se encuentra en el CV, como son: Puesto, Empresa y Duración.\n            3. Una nueva descripción corregida de por qué el candidato obtuvo la puntuación dada.\n\n            No debes inventarte nada, si no encuentras información suficiente en el CV del candidato indica -> "experiencias" : [ ["experiencia": "no tiene","puesto": "", "empresa": "","duracion": ""] ]\n\n            Como salida, debes proporcionar un JSON con la siguiente estructura:\n\n            [ "puntuacion": 0-100 , "experiencias" : [ ["experiencia": "","puesto": "", "empresa": "","duracion": ""] ], "descripcion": "" ]\n\n            <|eot_id|><|start_header_id|>user<|end_header_id|>\n            Título de la oferta de trabajo: {oferta}\n            CV del candidato: {cv}\n            Análisis erróneo del candidato: {analisis_previo}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                ')), 'cv_reviewer': Agent(agent_name='cv_reviewer', model='OPENAI', get_model=<function get_open_ai_json at 0x000001F9D3D92A20>, temperature=0, prompt=PromptTemplate(input_variables=['cv', 'experiencias'], template='\n                Eres un modelo de IA diseñado para analizar y detectar que la información contenida en las experiencias de trabajo de un candidato se aparecen tambien en su cv.\n                Debes puntuar con un 1 si las experiencias de trabajo no aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si en las las experiencias de trabajo aparece -> experiencia : \'no tiene\'\n\n                Debes puntuar con un 0 si las experiencias de trabajo aparecen en el cv del candidato.\n\n                Debes puntuar con un 0 si no hay experiencias de trabajo.\n\n                El formato de salida debe ser en formato JSON con una unica clave "puntuacion"\n\n                Basate en la siguiente información proporcionada para dar esta puntuación de alucinación: \n\n                cv del candidato: \n\n{cv}\n\n\n                Experiencias de trabajo del candidato: \n\n{experiencias}\n\n\n                ')), 'offer_reviewer': Agent(agent_name='offer_reviewer', model='NVIDIA', get_model=<function get_nvdia at 0x000001F9D3E4B240>, temperature=0, prompt=PromptTemplate(input_variables=['analisis', 'cv', 'oferta'], template='<|begin_of_text|><|start_header_id|>system<|end_header_id|>Eres un modelo de IA diseñado para analizar las posibles alucinaciones de otro modelo al realizar un análisis sobre un CV de un candidato para una oferta de trabajo.\n                Puntúa con un 1 si no es correcto, no tiene sentido o no es preciso el análisis realizado [hay alucinación por parte del modelo]\n                y con un 0 si es correcto el análisis, es preciso y se ajusta a la oferta [no hay alucinación por parte del modelo].\n\n\n                El modelo SÍ ha sufrido una alucinación si:\n\n                1. Las experiencias incluidas en el análisis no tienen relación con la oferta de empleo.\n\n                2. En la descripción se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es elevada y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n\n                El modelo NO ha sufrido una alucinación si:\n\n                1. No hay experiencias incluidas en el análisis y en su CV las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                2. En la descripción no se mencionan habilidades del candidato que no tienen relación con la oferta de empleo.\n\n                3. La puntuación es baja y las experiencias del candidato no tienen relación con la oferta de empleo.\n\n                \n                El formato de salida debe ser en formato JSON con una unica clave "alucinacion"\n\n\n                <|eot_id|><|start_header_id|>user<|end_header_id|>\n                Título de la oferta de trabajo: {oferta}\n                CV del candidato: {cv}\n                Análisis del candidato: {analisis}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n                '))}
[INFO|chatbot|L231] 2024-06-30 16:51:26: Graph and workflow created
[INFO|chatbot|L76] 2024-06-30 16:51:26: Candidato a analizar [Recibido del front end]:  Información Personal:  Nombre: Juan Pérez Teléfono: +1234567890 Correo Electrónico: juan.perez@email.com Ubicación: Ciudad de México, México Objetivo Profesional: Busco aplicar mis habilidades en desarrollo web para contribuir al crecimiento y éxito de una empresa innovadora en tecnología.  Experiencia Laboral:  Desarrollador Web | Empresa A Ciudad de México, México Marzo 2018 - Presente  Desarrollo y mantenimiento de aplicaciones web utilizando tecnologías modernas como HTML5, CSS3, JavaScript, y frameworks como React y Vue.js. Colaboración con equipos multidisciplinarios para el diseño e implementación de soluciones escalables y eficientes. Participación en el ciclo completo de desarrollo de software, desde el análisis de requisitos hasta la implementación y pruebas. Educación:  Licenciatura en Ingeniería en Sistemas Computacionales Universidad Nacional Autónoma de México (UNAM) Septiembre 2014 - Mayo 2018  Especialización en desarrollo de software y sistemas distribuidos. Proyecto de tesis sobre optimizaci - Enfermera en Clínica Privada
[INFO|chatbot|L83] 2024-06-30 16:51:26: Candidato a analizar :  id='b7893c93-e182-417d-8c3e-78d0d877a21a' cv='Información Personal:  Nombre: Juan Pérez Teléfono: +1234567890 Correo Electrónico: juan.perez@email.com Ubicación: Ciudad de México, México Objetivo Profesional: Busco aplicar mis habilidades en desarrollo web para contribuir al crecimiento y éxito de una empresa innovadora en tecnología.  Experiencia Laboral:  Desarrollador Web | Empresa A Ciudad de México, México Marzo 2018 - Presente  Desarrollo y mantenimiento de aplicaciones web utilizando tecnologías modernas como HTML5, CSS3, JavaScript, y frameworks como React y Vue.js. Colaboración con equipos multidisciplinarios para el diseño e implementación de soluciones escalables y eficientes. Participación en el ciclo completo de desarrollo de software, desde el análisis de requisitos hasta la implementación y pruebas. Educación:  Licenciatura en Ingeniería en Sistemas Computacionales Universidad Nacional Autónoma de México (UNAM) Septiembre 2014 - Mayo 2018  Especialización en desarrollo de software y sistemas distribuidos. Proyecto de tesis sobre optimizaci' oferta='Enfermera en Clínica Privada'
[INFO|agents|L20] 2024-06-30 16:51:26: Estado previo [Analyzer-Agent] : 
 {'candidato': Candidato(id='b7893c93-e182-417d-8c3e-78d0d877a21a', cv='Información Personal:  Nombre: Juan Pérez Teléfono: +1234567890 Correo Electrónico: juan.perez@email.com Ubicación: Ciudad de México, México Objetivo Profesional: Busco aplicar mis habilidades en desarrollo web para contribuir al crecimiento y éxito de una empresa innovadora en tecnología.  Experiencia Laboral:  Desarrollador Web | Empresa A Ciudad de México, México Marzo 2018 - Presente  Desarrollo y mantenimiento de aplicaciones web utilizando tecnologías modernas como HTML5, CSS3, JavaScript, y frameworks como React y Vue.js. Colaboración con equipos multidisciplinarios para el diseño e implementación de soluciones escalables y eficientes. Participación en el ciclo completo de desarrollo de software, desde el análisis de requisitos hasta la implementación y pruebas. Educación:  Licenciatura en Ingeniería en Sistemas Computacionales Universidad Nacional Autónoma de México (UNAM) Septiembre 2014 - Mayo 2018  Especialización en desarrollo de software y sistemas distribuidos. Proyecto de tesis sobre optimizaci', oferta='Enfermera en Clínica Privada'), 'analisis': None, 'alucinacion_cv': None, 'alucinacion_oferta': None, 'analisis_final': None}
[INFO|agents|L23] 2024-06-30 16:51:26: Análisis del candidato : 
 candidato=Candidato(id='b7893c93-e182-417d-8c3e-78d0d877a21a', cv='Información Personal:  Nombre: Juan Pérez Teléfono: +1234567890 Correo Electrónico: juan.perez@email.com Ubicación: Ciudad de México, México Objetivo Profesional: Busco aplicar mis habilidades en desarrollo web para contribuir al crecimiento y éxito de una empresa innovadora en tecnología.  Experiencia Laboral:  Desarrollador Web | Empresa A Ciudad de México, México Marzo 2018 - Presente  Desarrollo y mantenimiento de aplicaciones web utilizando tecnologías modernas como HTML5, CSS3, JavaScript, y frameworks como React y Vue.js. Colaboración con equipos multidisciplinarios para el diseño e implementación de soluciones escalables y eficientes. Participación en el ciclo completo de desarrollo de software, desde el análisis de requisitos hasta la implementación y pruebas. Educación:  Licenciatura en Ingeniería en Sistemas Computacionales Universidad Nacional Autónoma de México (UNAM) Septiembre 2014 - Mayo 2018  Especialización en desarrollo de software y sistemas distribuidos. Proyecto de tesis sobre optimizaci', oferta='Enfermera en Clínica Privada')
[INFO|chains|L38] 2024-06-30 16:51:26: Initializing LangChain using : get_gemini_pro
[INFO|modes|L249] 2024-06-30 16:51:27: Definida configuracion mediante archivo JSON en C:\Users\Jorge\Desktop\MULTI_AGENT_RECRUITER\src\..\config\generation.json
